<Lems description="2D model describing the Ott-Antonsen reduction of infinitely all-to-all coupled QIF neurons (Theta-neurons). Montbrio">

    <ComponentType name="derivatives">

        <!-- Powers should be entered as {powee^power} -->
        <!-- Parameters will be assumed to be swept. sweep data will be matched by order of entry -->
        <Parameter name="global_speed" dimension='float'/>
        <Parameter name="global_coupling" dimension='float'/>

        <DerivedParameter name="rec_n" value="1 / n_node"/>
        <!-- The parameters with name 'rec_speed_dt' is conidered to be integral part of tv coupling calculation
         if not present, the delay part of coupling will be 0 for each node -->
        <DerivedParameter name="rec_speed_dt" value="1.0f / global_speed / (dt)"/>
        <!-- nsig is the default variable for noise amplitude. Is equal to 1 if not defined -->
<!--        <DerivedParameter name="nsig" value="sqrt(dt) * sqrt(2.0 * 1e-5)"/>-->

        <!-- If empty then none -->
        <Constant name="I" dimension="lo=-10.0, hi=10.0, step=0.01" value="0.0" description="???"/>
        <Constant name="Delta" dimension="lo=0.0, hi=10.0, step=0.01" value="1.0" description="Vertical shift of the configurable nullcline."/>
        <Constant name="alpha" dimension="lo=0.0, hi=1.0, step=0.1" value="1.0" description=":math:`\alpha` ratio of effect between long-range and local connectivity."/>
        <Constant name="s" dimension="lo=-15.0, hi=15.0, step=0.01" value="0.0" description="QIF membrane reversal potential."/>
        <Constant name="k" dimension="lo=-15.0, hi=15.0, step=0.01" value="0.0" description="Switch for the terms specific to Coombes model."/>
        <Constant name="J" dimension="lo=-25.0, hi=25.0, step=0.0001" value="15.0" description="Constant parameter to scale the rate of feedback from the slow variable to the firing rate variable."/>
        <Constant name="eta" dimension="lo=-10.0, hi=10.0, step=0.0001" value="-5.0" description="Constant parameter to scale the rate of feedback from the firing rate variable to itself"/>
        <Constant name="Gamma" dimension="lo=0., hi=10.0, step=0.1" value="0.0" description="Derived from eterogeneous currents and synaptic weights (see Montbrio p.12)."/>
        <Constant name="gamma" dimension="lo=-2.0, hi=2.0, step=0.1" value="1.0" description="Constant parameter to reproduce FHN dynamics where excitatory input currents are negative. It scales both I and the long range coupling term."/>

        <!-- Exposures are used for observables, for the name enter variable to be observed (usually states)
        and for dimension enter the reduction functionality. Will be represented as variables_of_interest.
        Choices and default list with a (,) separator-->
        <Exposure name="r" dimension="r"/>
        <Exposure name="V" dimension="V"/>
        
        <Dynamics>
            <!-- "State variable ranges [lo, hi]" values are entered with keyword "default" -->
            <!-- For each state variable a set of boundaries can be added to encompass the boundaries of the dynamic range -->
            <!-- Leave empty "" for no boundaries. Set None for one-sided boundaries, i.e. "1.0, None" -->
            <StateVariable name="r" dimension="" exposure="0.0, INFINITY"/>
            <StateVariable name="V" dimension="" exposure="-2.0, 1.5"/>

            <!-- Derived variables can be used to simplify the time derivatives, enter the local coupling formulas or any formula -->
            <!-- syntax: [name]=[expression] -->
            <!-- Define for ex. global and local coupling: c_0 = coupling[0, ] and lc_0 = local_coupling -->
            <DerivedVariable name="Coupling_global" value="alpha * c_pop1"/>
            <DerivedVariable name="Coupling_local" value="(1-alpha) * rec_n * r"/>
            <DerivedVariable name="Coupling_Term" value="Coupling_global + Coupling_local"/>

            <!-- For conditionals use &lt(=); or &gt;(=) for less- or greater then (equal to)  -->
            <!-- Conditional used for if statement, syntax: if {condition} -> {cases[0]} else {cases[1]}. Cases are separated by (,) -->
            <TimeDerivative variable="dx" value="Delta / M_PI + 2 * V * r - k * {r^2} + Gamma * r / M_PI"/>
            <TimeDerivative variable="dy" value="{V^2} - {M_PI^2} * {r^2} + eta + (k * s + J) * r - k * V * r + gamma * I + Coupling_Term"/>

        </Dynamics>

    </ComponentType>

        <ComponentType name="coupling_function">

<!--        variables for pre synaptic function-->
        <Parameter name="V_j" dimension='0'/>
        <DerivedParameter name="c_pop1" value="global_coupling * rec_n"/>

        <Constant name="a" value="1" dimension="" description="Rescales the connection strength."/>

<!--        variables for post synaptic function-->
<!--        <Requirement name="wij" dimension=''/>-->
        <Dynamics>
            <DerivedVariable name="pre" value="sin(V_j - V)"/>
            <DerivedVariable name="post" value="a"/>
        </Dynamics>

        <!-- Handle local coupling result, full expression is c_0 *= 'value'. Name option is hardcoded -->


    </ComponentType>

    <!-- If noise needs to be present, just specify the component type. Detail might be added later -->
    <ComponentType name="noise" description="on">
    </ComponentType>

</Lems>